local u = require("oddsky.utils")
local colors = u.gen_colors()

local hl = u.highlight

local M = {}

M.set = function()
    vim.g.terminal_color_0 = colors.dark_5
    vim.g.terminal_color_1 = colors.red_dark
    vim.g.terminal_color_2 = colors.green_dark
    vim.g.terminal_color_3 = colors.orange_dark
    vim.g.terminal_color_4 = colors.blue_dark
    vim.g.terminal_color_5 = colors.purple_dark
    vim.g.terminal_color_6 = colors.teal_dark
    vim.g.terminal_color_7 = colors.light_3
    vim.g.terminal_color_8 = colors.light_5
    vim.g.terminal_color_9 = colors.red_dark
    vim.g.terminal_color_10 = colors.green_dark
    vim.g.terminal_color_11 = colors.orange_dark
    vim.g.terminal_color_12 = colors.blue_dark
    vim.g.terminal_color_13 = colors.purple_dark
    vim.g.terminal_color_14 = colors.teal_dark
    vim.g.terminal_color_15 = colors.light_2
    vim.g.terminal_color_background = colors.dark_5
    vim.g.terminal_color_foreground = colors.light_3

    -- UI highlight
    hl("Normal", { fg = colors.light_3, bg = colors.dark_5 })
    hl("NormalFloat", { fg = colors.light_3, bg = colors.dark_5 })
    hl("FloatBorder", { fg = colors.dark_4, bg = colors.dark_5 })
    hl("ColorColumn", { bg = colors.dark_4 })
    hl("Cursor", { fg = colors.dark_5, bg = colors.light_4 })
    hl("CursorLine", { bg = colors.dark_4 })
    hl("CursorColumn", { bg = colors.dark_4 })
    hl("Directory", { fg = colors.light_1, bg = colors.dark_5 })
    hl("DiffAdd", { fg = colors.teal_dark, bg = colors.dark_5 })
    hl("DiffChange", { fg = colors.orange_dark, bg = colors.dark_5 })
    hl("DiffDelete", { fg = colors.red_dark, bg = colors.dark_5 })
    hl("DiffText", { fg = colors.violet_dark, bg = colors.dark_5 })
    hl("EndOfBuffer", { fg = colors.dark_5, bg = colors.dark_5 })
    hl("ErrorMsg", { fg = colors.red_dark, bg = colors.dark_5, underline = true })
    hl("VertSplit", { fg = colors.dark_4, bg = colors.dark_5 })
    hl("WinSeparator", { link = "VertSplit" })
    hl("Folded", { fg = colors.dark_1, bg = colors.dark_5 })
    hl("FoldColumn", { fg = colors.dark_1, bg = colors.dark_5 })
    hl("SignColumn", { fg = colors.dark_2, bg = colors.dark_5 })
    hl("IncSearch", { fg = colors.dark_4, bg = colors.search_dark })
    hl("LineNr", { fg = colors.dark_2, bg = colors.dark_5 })
    hl("CursorLineNr", { fg = colors.light_5, bg = colors.dark_4 })
    hl("MatchParen", { fg = colors.light_3, bold = true })
    hl("ModeMsg", { fg = colors.light_3, bg = colors.dark_4 })
    hl("MoreMsg", { fg = colors.light_3, bg = colors.dark_4 })
    hl("NonText", { fg = colors.dark_4 })
    hl("Pmenu", { fg = colors.light_3, bg = colors.dark_5 })
    hl("PmenuSel", { fg = colors.light_3, bg = colors.dark_4 })
    hl("PmenuSbar", { bg = colors.dark_3 })
    hl("PmenuThumb", { bg = colors.dark_1 })
    hl("Question", { fg = colors.blue_dark, bg = colors.dark_5 })
    hl("Search", { fg = colors.dark_4, bg = colors.search_dark })
    hl("SpecialKey", { fg = colors.dark_2, bg = colors.dark_5 })
    hl("StatusLine", { fg = colors.light_3, bg = colors.dark_4 })
    hl("StatusLineNC", { fg = colors.light_3, bg = colors.dark_5 })
    hl("Tabline", { fg = colors.light_3, bg = colors.dark_4 })
    hl("TablineFill", { fg = colors.light_3, bg = colors.dark_4 })
    hl("TablineSel", { fg = colors.light_3, bg = colors.dark_5 })
    hl("Title", { bold = true })
    hl("Visual", { bg = colors.visual_dark })
    hl("VisualNOS", { bg = colors.visual_dark })
    hl("WarningMsg", { fg = colors.yellow_dark, bold = true })
    hl("WildMenu", { fg = colors.light_3, bg = colors.blue_dark })

    -- Syntax highlight
    hl("Comment", { fg = colors.dark_2 })
    hl("Constant", { fg = colors.violet_dark })
    hl("String", { fg = colors.teal_dark })
    hl("Character", { fg = colors.teal_dark })
    hl("Number", { fg = colors.teal_dark })
    hl("Boolean", { fg = colors.purple_dark, bold = true })
    hl("Float", { fg = colors.teal_dark })
    hl("Identifier", { fg = colors.orange_dark })
    hl("Function", { fg = colors.blue_dark })
    hl("Statement", { fg = colors.orange_dark, bold = true })
    hl("Conditional", { fg = colors.orange_dark, bold = true })
    hl("Repeat", { fg = colors.orange_dark, bold = true })
    hl("Label", { fg = colors.purple_dark })
    hl("Operator", { fg = colors.purple_dark })
    hl("Keyword", { fg = colors.orange_dark, bold = true })
    hl("Exception", { fg = colors.orange_dark, bold = true })
    hl("PreProc", { fg = colors.orange_dark })
    hl("Include", { fg = colors.orange_dark })
    hl("Define", { fg = colors.orange_dark, bold = true })
    hl("Macro", { fg = colors.orange_dark })
    hl("PreCondit", { fg = colors.orange_dark, bold = true })
    hl("Type", { fg = colors.teal_dark })
    hl("StorageClass", { fg = colors.orange_dark, bold = true })
    hl("Structure", { fg = colors.teal_dark, bold = true })
    hl("TypeDef", { fg = colors.teal_dark, bold = true })
    hl("Special", { fg = colors.blue_dark })
    hl("SpecialChar", { fg = colors.blue_dark })
    hl("Tag", { fg = colors.teal_dark })
    hl("Delimiter", { fg = colors.teal_dark })
    hl("SpecialComment", { fg = colors.dark_2, bold = true })
    hl("Debug", { fg = colors.yellow_dark })
    hl("Underlined", { underline = true })
    hl("Ignore", { fg = colors.light_3 })
    hl("Error", { fg = colors.red_dark, underline = true })
    hl("SpellBad", { fg = colors.red_dark, underline = true, sp = colors.red_dark })
    hl("SpellCap", { fg = colors.red_dark, underline = true, sp = colors.red_dark })
    hl("SpellRare", { fg = colors.red_dark, underline = true, sp = colors.red_dark })
    hl("SpellLocale", { fg = colors.red_dark, underline = true, sp = colors.red_dark })
    hl("Todo", { fg = colors.yellow_dark, bold = true })
    hl("Whitespace", { fg = colors.dark_4 })

    --- Treesitter highlight
    hl("@error", { fg = colors.red_dark })
    hl("@text.literal", { fg = colors.light_3 })
    hl("@text.literal.markdown", { fg = colors.light_3 })
    hl("@text.literal.markdown.inline", { fg = colors.light_3 })
    hl("@text.title", { fg = colors.teal_dark, bold = true })
    hl("@text.emphasis", { fg = colors.teal_dark, italic = true })
    hl("@text.strong", { fg = colors.teal_dark, bold = true })
    hl("@text.uri", { fg = colors.blue_dark, underline = true })
    hl("@textReference", { fg = colors.blue_dark })
    hl("@text.underline", { underline = true })
    hl("@text.todo", { fg = colors.yellow_dark, bold = true })
    hl("@text.note", { fg = colors.green_dark, bold = true })
    hl("@text.warning", { fg = colors.yellow_dark, bold = true })
    hl("@text.danger", { fg = colors.red_dark, bold = true })
    hl("@comment", { fg = colors.dark_2 })
    hl("@punctuation", { fg = colors.light_3 })
    hl("@punctuation.special", { fg = colors.teal_dark })
    hl("@punctuation.bracket", { fg = colors.light_3 })
    hl("@punctuation.delimiter", { fg = colors.light_3 })
    hl("@constant", { fg = colors.violet_dark })
    hl("@constant.builtin", { fg = colors.violet_dark, bold = true })
    hl("@constant.macro", { fg = colors.orange_dark, bold = true })
    hl("@define", { fg = colors.orange_dark, bold = true })
    hl("@macro", { fg = colors.orange_dark, bold = true })
    hl("@string", { fg = colors.teal_dark })
    hl("@string.escape", { fg = colors.blue_dark })
    hl("@stringEscape", { fg = colors.blue_dark })
    hl("@string.special", { fg = colors.blue_dark })
    hl("@string.regex", { fg = colors.purple_dark })
    hl("@character", { fg = colors.teal_dark })
    hl("@character.special", { fg = colors.blue_dark })
    hl("@number", { fg = colors.teal_dark })
    hl("@boolan", { fg = colors.violet_dark, bold = true })
    hl("@float", { fg = colors.teal_dark })
    hl("@function", { fg = colors.blue_dark })
    hl("@function.builtin", { fg = colors.blue_dark })
    hl("@function.macro", { fg = colors.blue_dark, bold = true })
    hl("@attribute", { fg = colors.orange_dark })
    hl("@annotation", { fg = colors.yellow_dark })
    hl("@parameter", { fg = colors.orange_dark })
    hl("@parameter.reference", { fg = colors.orange_dark })
    hl("@method", { fg = colors.blue_dark })
    hl("@field", { fg = colors.teal_dark })
    hl("@property", { fg = colors.teal_dark })
    hl("@constructor", { fg = colors.blue_dark })
    hl("@conditional", { fg = colors.orange_dark, bold = true })
    hl("@repeat", { fg = colors.orange_dark, bold = true })
    hl("@label", { fg = colors.purple_dark })
    hl("@operator", { fg = colors.purple_dark })
    hl("@keyword", { fg = colors.orange_dark, bold = true })
    hl("@keyword.function", { fg = colors.blue_dark })
    hl("@keyword.operator", { fg = colors.purple_dark })
    hl("@exception", { fg = colors.orange_dark, bold = true })
    hl("@variable", { fg = colors.light_3 })
    hl("@variable.builtin", { fg = colors.light_3 })
    hl("@variable.parameter", { fg = colors.light_3 })
    hl("@variable.other", { fg = colors.teal_dark })
    hl("@type", { fg = colors.teal_dark })
    hl("@type.builtin", { fg = colors.teal_dark })
    hl("@type.qualifire", { fg = colors.teal_dark })
    hl("@type.definition", { fg = colors.teal_dark, bold = true })
    hl("@storageclass", { fg = colors.orange_dark, bold = true })
    hl("@structure", { fg = colors.teal_dark, bold = true })
    hl("@namespace", { fg = colors.orange_dark })
    hl("@include", { fg = colors.orange_dark, bold = true })
    hl("@preproc", { fg = colors.orange_dark })
    hl("@debug", { fg = colors.yellow_dark })
    hl("@tag", { fg = colors.teal_dark })
    hl("@tag.delimiter", { fg = colors.light_3 })
    hl("@tag.attribute", { fg = colors.orange_dark })

    -- LSP semantic tokens
    hl("@lsp.type.class", { link = "@type" })
    hl("@lsp.type.decorator", { link = "@function" })
    hl("@lsp.type.enum", { link = "@structure" })
    hl("@lsp.type.enumMember", { link = "@property" })
    hl("@lsp.type.function", { link = "@function" })
    hl("@lsp.type.interface", { link = "@type" })
    hl("@lsp.type.macro", { link = "@macro" })
    hl("@lsp.type.method", { link = "@function" })
    hl("@lsp.type.namespace", { link = "@namespace" })
    hl("@lsp.type.parameter", { link = "@parameter" })
    hl("@lsp.type.property", { link = "@property" })
    hl("@lsp.type.struct", { link = "@structure" })
    hl("@lsp.type.type", { link = "@type" })
    hl("@lsp.type.typeParameter", { link = "@type" })
    hl("@lsp.type.variable", { link = "@variable" })
    hl("@lsp.type.keyword", { link = "@keyword" })

    -- Typescript fix
    hl("typescriptParens", { fg = colors.light_3, bg = "NONE" })
    -- A custome thing to make cmp doc border invisible
    hl("CmpNDocBorder", { fg = colors.dark_4, bg = colors.dark_5 })

    hl("htmlTag", { fg = colors.teal_dark })
    hl("htmlEndTag", { fg = colors.teal_dark })
    hl("htmlTagName", { fg = colors.teal_dark })
    hl("htmlSpecialTagName", { fg = colors.teal_dark })
    hl("htmlArg", { fg = colors.orange_dark })

    hl("BufferLineIndicatorSelected", { bg = colors.dark_5 })
    hl("BufferLineFill", { bg = colors.dark_4 })

    -- Telescope nvim
    hl("TelescopePromptBorder", { fg = colors.dark_4 })
    hl("TelescopeResultsBorder", { fg = colors.dark_4 })
    hl("TelescopePreviewBorder", { fg = colors.dark_4 })
    hl("TelescopeNormal", { fg = colors.light_3 })
    hl("TelescopeSelection", { fg = colors.light_3 })
    hl("TelescopeMultiSelection", { fg = colors.light_3 })
    hl("TelescopeMatching", { fg = colors.light_3, bold = true })
    hl("TelescopePromptPrefix", { fg = colors.light_3, bold = true })

    hl("LspReferenceText", { bg = colors.blue_dark })
    hl("LspReferenceRead", { bg = colors.blue_dark })
    hl("LspReferenceWrite", { bg = colors.blue_dark })
    hl("DiagnosticError", { fg = colors.red_dark })
    hl("DiagnosticWarn", { fg = colors.yellow_dark })
    hl("DiagnosticHint", { fg = colors.blue_dark })
    hl("DiagnosticInfo", { fg = colors.teal_dark })

    hl("CocHighlightText", { bg = colors.blue_dark })
    hl("CocHighlightRead", { bg = colors.blue_dark })
    hl("CocHighlightWrite", { bg = colors.blue_dark })

    hl("CmpItemKind", { fg = colors.light_3 })

    hl("GitSignsAddLn", { fg = colors.green_dark, bg = colors.green_dark })
    hl("GitSignsChangeLn", { fg = colors.orange_dark, bg = colors.orange_dark })
    hl("GitSignsCurrentLineBlame", { fg = colors.dark_2 })

    -- neotree
    hl("NeoTreeDirectoryName", { fg = colors.light_3 })
    hl("NeoTreeDirectoryIcon", { fg = colors.light_3 })
    hl("NeoTreeFloatBorder", { fg = colors.dark_3, bg = colors.dark_5 })
end

return M
